{
  "swagger" : "2.0",
  "info" : {
    "description" : "API Gateway Alias Management Service allows you to manage aliases in the API Gateway. Any user with the 'Manage aliases' functional previlige can manage the aliases in API Gateway. By default, the users who are part of API-Gateway-Administrators group will have this privilege. \n\n An alias in API Gateway holds environment-specific property values that can be used in policy routing configurations. The aliases can be referred to in routing endpoints, routing rules, endpoint connection properties, outbound authentication tokens, and outbound HTTP headers instead of providing an actual value. The corresponding alias value based on the stage is obtained and is substituted in place of an alias name during run-time. Thus the same alias can be referred to in multiple policies and the change in a particular alias would affect all the policy properties in which it is being referred. \n\n There are mainly six types of alias \n 1. Simple alias - Holds a simple value \n 2. Endpoint alias - Holds the endpoint value along with additional properties such as connection timeout, read timeout, whether to pass security headers or not, keystore alias, key alias \n 3. HTTP Transport security alias - Contains the transport level security information required while accessing the native API. Used in the outbound policies \n 4. SOAP message security alias - Contains message level security information that is required to access the native API \n 5. webMethods Integration Server alias - Holds the ESB service value. Can be used in the Invoke webMethods IS policy for request and response processing.\n 6. Transformation alias - Holds a list of XSLT style sheets. Can be used in the XSLT Transformation policies for request and response processing.\n\n In addition to the above alias types, the configurations for \n SAML issuer - which holds the configuration to communicate to STS (Security Token Service) to retrieve the SAML token. Used in the Outbound policies, \n Authorization server - which holds configuration of authorization server(internal/external)for introspection/Dynamic client registration. Used in the token validation and OAuth2 client creation, \n Client metadata mapping - which holds the authorization service provider metadata information. Used in the Dynamic client registration for the authorization server alias and \n Service Registry- which holds registry endpoint and service paths information. Used in the client side and server side discovery \n are internally stored as aliases.\n AWS Configuration Alias- which holds AWS instance configuaration details. This can be configured in any custom policies for invoking a lambda service\n running in any AWS cloud instance.\n Integration servers - This holds webMethods Integration Server accounts details. This configuration will be used to create connection to the integration server when publishing APIs to an integration server for implementing the API. You can refer to API Gateway Service Management Swagger documentation for information about how to publish API Gateway APIs to Integration servers.",
    "version" : "10.15",
    "title" : "API Gateway Alias Management Service"
  },
  "host" : "localhost:5555",
  "basePath" : "/rest/apigateway",
  "schemes" : [ "http" ],
  "consumes" : [ "plain/text" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/alias" : {
      "get" : {
        "description" : "The method retrieves a list of all aliases in API Gateway.",
        "operationId" : "getAllAlias",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "This status code indicates that the list of aliases is successfully retrieved.",
            "examples" : {
              "application/json" : "{\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n\t\"endPointURI\": \"https://myDevstage:9090\",\r\n\t\"connectionTimeout\": \"23\",\r\n\t\"optimizationTechnique\": \"MTOM\",\r\n\t\"readTimeout\": \"36\",\r\n\t\"passSecurityHeaders\": true,\r\n\t\"keystoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\"keyAlias\": \"ssos\",\r\n\t\"name\": \"MystageEndpoint\",\r\n\t\"description\": \"Endpoint alias for myDevstage.\",\r\n\t\"type\": \"endpoint\"\r\n},\r\n{\r\n\t\"id\": \"842c4526-db9a-4ef9-9782-edda1a6ab84c\"\r\n\t\"authType\": \"WSS_USERNAME\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"wssCredentials\": {\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"UsernameMessageAlias\",\r\n\t\"description\": \"WSS username message alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"652c4526-db8a-4ef9-9782-edda1a4gf9bc\"\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachineadfs20.sag.com\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"KerberosHttpTransportAlias\",\r\n\t\"description\": \"vmmachineadfs20 kerberos transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"422c4526-db9a-4ef9-9872-edda1a6aa9bc\"\r\n\t\"authType\": \"HTTP_BASIC\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"BasicHttpTransportAlias\",\r\n\t\"description\": \"Basic http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"732c4526-db9a-5t46-9782-edda1a4ac9bc\"\r\n\t\"authType\": \"NTLM\",\r\n\t\"httpAuthCredentials\": {\r\n\t\t\"domain\": \"localhost\",\r\n\t\t\"userName\": \"Administrator\",\r\n\t\t\"password\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"NTLMTransportAlias\",\r\n\t\"description\": \"ntlm http transport alias\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"652c4526-db9a-4ef9-3265-edda1a6aa9bc\"\r\n\t\"authType\": \"OAUTH2\",\r\n\t\"oauth2Token\": \"T2F1dGgydG9rZW4=\",\r\n\t\"authMode\": \"NEW\",\r\n\t\"name\": \"OAuthTransportAlias\",\r\n\t\"description\": \"OAuth2 alias for outbound transport security\",\r\n\t\"type\": \"httpTransportSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"732c3265-db9a-4ef9-9782-edda1a6aa9bc\"\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n},\r\n{\r\n\t\"id\": \"12c4526-db9a-5ef9-9845-edda1a7ba9bc\"\r\n\t\"authType\": \"SAML\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"\",\r\n\t\t\"keyAlias\": null,\r\n\t\t\"certificateAlias\": null,\r\n\t\t\"truststoreAlias\": \"\"\r\n\t},\r\n\t\"samlIssuerConfig\": \"${SAMLIssuer1}\",\r\n\t\"name\": \"SAMLAlias\",\r\n\t\"description\": \"SAML secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n}\r\n"
            },
            "schema" : {
              "$ref" : "#/definitions/AliasResponseModel"
            }
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "post" : {
        "description" : "Use this method to create an alias. There are different types of alias like Endpoint, Simple etc. Refer to the Alias schema for different type of alias that you can create. If you want to create an alias for a specific type (say Endpoint alias), refer to the corresponding schema (EndpointAlias)",
        "operationId" : "createAlias",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Alias"
          },
          "x-examples" : {
            "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "This status code indicates that the alias has been successfully created in API Gateway, and the newly created alias is available in the response body.",
            "examples" : {
              "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            },
            "schema" : {
              "$ref" : "#/definitions/Alias"
            }
          },
          "400" : {
            "description" : "This status code indicates that an alias with the given name already exists in API Gateway or the request body is not correct.",
            "examples" : {
              "application/json" : "{}"
            }
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      }
    },
    "/alias/{aliasId}" : {
      "get" : {
        "description" : "The method retrieves the details of an alias in API Gateway.",
        "operationId" : "getAlias",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "aliasId",
          "in" : "path",
          "description" : "The path parameter specifies the id of an alias whose details are to be retrieved.",
          "required" : true,
          "type" : "string",
          "x-example" : "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
        } ],
        "responses" : {
          "200" : {
            "description" : "This status code indicates that the details of the alias are successfully retrieved.",
            "examples" : {
              "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            },
            "schema" : {
              "$ref" : "#/definitions/Alias"
            }
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404" : {
            "description" : "This status code indicates that an alias with the given id could not be found in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n    \"errorDetails\": \" Alias with id: 732c4526-db9a-4ef9-9782-edda1a6aa9bc does not exist.\"\r\n}"
            }
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "put" : {
        "description" : "The method updates the details of a specified alias in API Gateway. The API request body must contain the payload of the alias that needs to be updated.",
        "operationId" : "updateAlias",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "aliasId",
          "in" : "path",
          "description" : "The path parameter specifies the id of an alias whose detail is to be updated in API Gateway.",
          "required" : true,
          "type" : "string",
          "x-example" : "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "This parameter describes the request payload of an alias that is to be updated in API Gateway.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Alias"
          },
          "x-examples" : {
            "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "This status code indicates that the alias has been successfully updated in API Gateway, and the updated alias is available in the response body.",
            "examples" : {
              "application/json" : "{\r\n\t\"authType\": \"KERBEROS\",\r\n\t\"signAndEncryptConfig\": {\r\n\t\t\"keyStoreAlias\": \"DEFAULT_IS_KEYSTORE\",\r\n\t\t\"keyAlias\": \"ssos\",\r\n\t\t\"certificateAlias\": \"ssos\",\r\n\t\t\"truststoreAlias\": \"DEFAULT_IS_TRUSTSTORE\"\r\n\t},\r\n\t\"kerberosCredentials\": {\r\n\t\t\"servicePrincipal\": \"vmmachine01.sag.com/adfs\",\r\n\t\t\"servicePrincipalNameForm\": \"username\",\r\n\t\t\"clientPrincipal\": \"Administrator\",\r\n\t\t\"clientPassword\": \"bWFuYWdl\"\r\n\t},\r\n\t\"authMode\": \"DELEGATE_INCOMING\",\r\n\t\"name\": \"KerberosMessageAlias\",\r\n\t\"description\": \"Kerberos outbound message secure alias\",\r\n\t\"type\": \"soapMessageSecurityAlias\"\r\n\t\"id\": \"732c4526-db9a-4ef9-9782-edda1a6aa9bc\"\r\n}"
            },
            "schema" : {
              "$ref" : "#/definitions/Alias"
            }
          },
          "400" : {
            "description" : "This status code indicates that the request body is invalid."
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404" : {
            "description" : "This status code indicates that an alias with the specified id could not be found in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n    \"errorDetails\": \" Unable to process the PUT request for alias. Error occurred while processing the payload. Error Message:\\n Alias with id: 6a6ea325-4190-411b-8bbd-0a7e94dbc7d1 does not exist.\"\r\n}"
            }
          },
          "405" : {
            "description" : "This status code indicates that the specified HTTP method is not allowed for the requested alias in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n  \"errorDetails\": \" Unable to process the PUT request for alias. Error occurred while processing the payload. Error Message:\\n Method: PUT is not allowed on resource: alias\"\r\n}"
            }
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      },
      "delete" : {
        "description" : "The method deletes an alias from API Gateway.",
        "operationId" : "deleteAlias",
        "parameters" : [ {
          "name" : "aliasId",
          "in" : "path",
          "description" : "The path parameter specifies the id of an alias that is to be deleted from API Gateway.",
          "required" : true,
          "type" : "string",
          "x-example" : "732c4526-db9a-4ef9-9782-edda1a6aa9bc"
        } ],
        "responses" : {
          "204" : {
            "description" : "This status code indicates that the specified alias has been successfully deleted from API Gateway."
          },
          "401" : {
            "description" : "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404" : {
            "description" : "This status code indicates that an alias with the given id could not be found in API Gateway.",
            "examples" : {
              "application/json" : "{\r\n    \"errorDetails\": \" Alias with id: 732c4526-db9a-4ef9-9782-edda1a6aa9bc does not exist.\"\r\n}"
            }
          },
          "405" : {
            "description" : "This status code indicates that the specified HTTP method is not allowed for the requested alias in API Gateway."
          }
        },
        "security" : [ {
          "Basic" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "Basic" : {
      "description" : "API Gateway Administrator",
      "type" : "basic"
    }
  },
  "definitions" : {
    "AWSConfigurationAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "accessKey" : {
            "type" : "string",
            "description" : "The access key ID for the AWS instance. This is used to sign the requests"
          },
          "region" : {
            "type" : "string",
            "description" : "The configured AWS instance region detail"
          },
          "secretKey" : {
            "type" : "string",
            "description" : "The secret access key for the AWS instance. This is used to sign the requests"
          }
        }
      } ]
    },
    "Alias" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "A description about the alias"
        },
        "id" : {
          "type" : "string",
          "description" : "A unique ID for the alias",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "A unique name for the assertion"
        },
        "owner" : {
          "type" : "string",
          "description" : "Owner of the alias"
        },
        "stage" : {
          "type" : "string",
          "description" : "Stage for which this alias needs to be used"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the alias",
          "enum" : [ "simple", "endpoint", "httpTransportSecurityAlias", "soapMessageSecurityAlias", "samlIssuerAlias", "authServerAlias", "webmethodsAlias", "transformationAlias", "serviceRegistryAlias", "clientMetadataMapping", "awsConfigurationAlias", "isConfigurationAlias" ]
        }
      }
    },
    "AliasResponseModel" : {
      "type" : "object",
      "properties" : {
        "alias" : {
          "type" : "array",
          "description" : "List of aliases",
          "items" : {
            "$ref" : "#/definitions/Alias"
          }
        }
      },
      "description" : "This model contains the basics details of all Alias."
    },
    "AuthInfo" : {
      "type" : "object",
      "discriminator" : "type"
    },
    "AuthServerAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authServerType" : {
            "type" : "string",
            "description" : "Type of the authorization server",
            "enum" : [ "LOCAL_IS", "REMOTE_IS", "EXTERNAL" ]
          },
          "dcrEndpoint" : {
            "$ref" : "#/definitions/DynamicClientRegistrationEndpoint"
          },
          "localIntrospectionConfig" : {
            "$ref" : "#/definitions/LocalIntrospectionConfig"
          },
          "metadata" : {
            "$ref" : "#/definitions/Metadata"
          },
          "providerName" : {
            "type" : "string",
            "description" : "Name of the provider which was created using ClientMetadataMapping alias, used in the Dynamic client registration"
          },
          "discoveryURL" : {
            "type" : "string",
            "description" : "The discovery URL of the authorization server"
          },
          "remoteISConfig" : {
            "$ref" : "#/definitions/RemoteISConfig"
          },
          "remoteIntrospectionConfig" : {
            "$ref" : "#/definitions/RemoteIntrospectionConfig"
          },
          "scopes" : {
            "type" : "array",
            "description" : "List of scopes available in the authorization server",
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/definitions/Scope"
            }
          },
          "sslConfig" : {
            "$ref" : "#/definitions/SSLConfig"
          },
          "supportedGrantTypes" : {
            "type" : "array",
            "description" : "List of grant types supported by the authorization server",
            "items" : {
              "type" : "string"
            }
          },
          "tokenGeneratorConfig" : {
            "$ref" : "#/definitions/TokenGeneratorConfig"
          }
        }
      } ]
    },
    "BasicAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object",
        "properties" : {
          "password" : {
            "$ref" : "#/definitions/GatewaySecret"
          },
          "username" : {
            "type" : "string",
            "description" : "Username for the basic authentication"
          }
        }
      } ]
    },
    "ClientCredentialsAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string"
          },
          "clientSecret" : {
            "$ref" : "#/definitions/GatewaySecret"
          },
          "scope" : {
            "type" : "string"
          },
          "tokenType" : {
            "type" : "string",
            "example" : "SSWS/Bearer",
            "description" : "Type of token"
          }
        }
      } ]
    },
    "ClientMetadataMapping" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "extendedValuesV2" : {
            "type" : "array",
            "description" : "List of headers that needs to be sent along with the client management request",
            "items" : {
              "$ref" : "#/definitions/ExtendedValue"
            }
          },
          "generateCredentials" : {
            "type" : "boolean",
            "description" : "Specifies whether API Gateway should generate clientId and client secret"
          },
          "implNames" : {
            "type" : "object",
            "description" : "Map of specification names to the implementation names of the service provider",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "providerName" : {
            "type" : "string",
            "description" : "Name of the provider"
          },
          "supportedApplicationTypes" : {
            "type" : "array",
            "description" : "List of application_type values supported by the authorization server provider",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "Credentials" : {
      "type" : "object",
      "properties" : {
        "domain" : {
          "type" : "string",
          "description" : "Specify a domain to access the native API"
        },
        "password" : {
          "type" : "string",
          "description" : "Specify a base64 encoded password to access the native API"
        },
        "userName" : {
          "type" : "string",
          "description" : "Specify a username to access the native API"
        }
      }
    },
    "DynamicClientRegistrationEndpoint" : {
      "type" : "object",
      "properties" : {
        "authInfo" : {
          "$ref" : "#/definitions/AuthInfo"
        },
        "clientRegistrationEndpoint" : {
          "$ref" : "#/definitions/OAuth2Endpoint"
        }
      }
    },
    "EndpointAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "connectionTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "time interval (in seconds) after which a connection attempt times out"
          },
          "endPointURI" : {
            "type" : "string",
            "description" : "the default URI or components of the URI such as service name"
          },
          "keyAlias" : {
            "type" : "string",
            "description" : "Key alias in the particular keyStore"
          },
          "keystoreAlias" : {
            "type" : "string",
            "description" : "Keystore alias name that is used for the signing/encryption"
          },
          "optimizationTechnique" : {
            "type" : "string",
            "description" : "Type of optimization technique used for SOAP messages",
            "enum" : [ "None", "MTOM", "SwA" ]
          },
          "passSecurityHeaders" : {
            "type" : "boolean",
            "description" : "Boolean value whether to pass security headers or not"
          },
          "readTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "time interval (in seconds) after which a socket read attempt times out"
          },
          "truststoreAlias" : {
            "type" : "string",
            "description" : "Truststore alias name is used to validate the server certificate"
          }
        }
      } ]
    },
    "ExtendedValue" : {
      "type" : "object",
      "properties" : {
        "endpointType" : {
          "type" : "string",
          "description" : "Type of endpoint for which the additional header needs to sent",
          "enum" : [ "CLIENT_REGISTRATION", "CLIENT_UPDATE", "CLIENT_DELETE", "CLIENT_READ", "SCOPE_CREATE", "SCOPE_READ", "SCOPE_DELETE", "SCOPE_UPDATE" ]
        },
        "key" : {
          "type" : "string",
          "description" : "Header name"
        },
        "value" : {
          "type" : "string",
          "description" : "Header value"
        }
      }
    },
    "GatewaySecret" : {
      "type" : "object",
      "properties" : {
        "cachedSecret" : {
          "type" : "string"
        },
        "secret" : {
          "type" : "string"
        },
        "xrayview" : {
          "type" : "string"
        }
      }
    },
    "HTTPTransportSecurityAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authMode" : {
            "type" : "string",
            "description" : "Mode of authentication that needs to be used",
            "enum" : [ "NEW", "INCOMING_HTTP_BASIC_AUTH", "INCOMING_WSS_USER", "INCOMING_X509", "DELEGATE_INCOMING", "INCOMING_OAUTH_TOKEN", "INCOMING_JWT", "TRANSPARENT", "INCOMING_KERBEROS" ]
          },
          "authType" : {
            "type" : "string",
            "description" : "type of authentication you want to use while communicating with the native API",
            "enum" : [ "HTTP_BASIC", "NTLM", "OAUTH2", "KERBEROS", "JWT", "ALIAS", "REMOVE_INCOMING_HTTP_HEADERS" ]
          },
          "httpAuthCredentials" : {
            "$ref" : "#/definitions/Credentials"
          },
          "kerberosCredentials" : {
            "$ref" : "#/definitions/KerberosCredentials"
          },
          "oauth2Token" : {
            "type" : "string",
            "description" : "Specify a base64 encoded OAuth2 token that is used for authentication"
          }
        }
      } ]
    },
    "ISConfigurationAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "contentModelComplianceForWSDL" : {
            "type" : "string",
            "enum" : [ "Strict", "Lax", "None" ]
          },
          "enableMTOM" : {
            "type" : "boolean"
          },
          "enforceWSICompliance" : {
            "type" : "boolean"
          },
          "folderName" : {
            "type" : "string"
          },
          "importSwaggerBasedOnTags" : {
            "type" : "boolean"
          },
          "keyAlias" : {
            "type" : "string",
            "description" : "The alias of the private key that is stored in the keystore specified by the keystore alias.\nThe Key alias field contains a list of the available aliases in the selected keystore. If there are no configured keystores, this field is empty"
          },
          "keystoreAlias" : {
            "type" : "string",
            "description" : "The Keystore alias field contains a list of the available keystore aliases in API Gateway. If there are no configured keystore aliases, this field lists the default Integration Server keystore, DEFAULT_IS_KEYSTORE ."
          },
          "packageName" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string",
            "description" : "A valid password of the Integration Server user identified by the attribute Username"
          },
          "skipCustomScalarTypes" : {
            "type" : "boolean"
          },
          "url" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string",
            "description" : "The username of a registered Integration Server user who has the functional privilege to create the service"
          },
          "validateSchemaWithXerces" : {
            "type" : "boolean"
          }
        }
      } ]
    },
    "KerberosCredentials" : {
      "type" : "object",
      "properties" : {
        "clientPassword" : {
          "type" : "string",
          "description" : "Specify a base64 encoded password for the client principal"
        },
        "clientPrincipal" : {
          "type" : "string",
          "description" : "a unique identity to which Kerberos can assign tickets"
        },
        "requestDelegateToken" : {
          "type" : "boolean",
          "description" : "Boolean value whether the token needs to be delegated or not"
        },
        "servicePrincipal" : {
          "type" : "string",
          "description" : "a unique identifier of a service instance"
        },
        "servicePrincipalNameForm" : {
          "type" : "string",
          "description" : "the format in which you want to specify the principal name of the service that is registered with the principal database",
          "enum" : [ "hostbased", "username" ]
        }
      }
    },
    "LocalIntrospectionConfig" : {
      "type" : "object",
      "properties" : {
        "certificateAlias" : {
          "type" : "string",
          "description" : "Select the certificate from the truststore that is used to validate the token."
        },
        "description" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the clock skew in seconds to validate JWT"
        },
        "issuer" : {
          "type" : "string",
          "description" : "Third party issuer name"
        },
        "jwksuri" : {
          "type" : "string",
          "description" : "JSON Web Key URI"
        },
        "trustStoreAlias" : {
          "type" : "string",
          "description" : "The truststore to be used by API Gateway when validating the token issued by the authorization server. Truststore is a repository that holds all the trusted public certificates"
        },
        "useLocalClockSkew" : {
          "type" : "boolean",
          "description" : "Specifies whether to use the local clock skew for validating JWT."
        }
      }
    },
    "Metadata" : {
      "type" : "object",
      "properties" : {
        "accessTokenURL" : {
          "type" : "string",
          "description" : "URL to get the access token from the authorization server"
        },
        "authorizeURL" : {
          "type" : "string",
          "description" : "URL to get the approval from the resource owner"
        },
        "refreshTokenURL" : {
          "type" : "string",
          "description" : "URL to get the new access token from the refresh token"
        }
      }
    },
    "NoAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object"
      } ]
    },
    "OAuth2Endpoint" : {
      "type" : "object",
      "properties" : {
        "endpoint" : {
          "type" : "string",
          "description" : "Client registration endpoint in the authorization server"
        },
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "https" : {
          "type" : "boolean"
        },
        "keyAlias" : {
          "type" : "string",
          "description" : "The key alias is the private key that is used sign the request sent to the authorization server"
        },
        "keyStoreAlias" : {
          "type" : "string",
          "description" : "Specify the keystore that needs to be used by API Gateway while sending the request to the authorization server. A keystore is a repository of private key and its corresponding public certificate"
        }
      }
    },
    "OAuth2Endpoints" : {
      "type" : "object",
      "properties" : {
        "endpoints" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/OAuth2Endpoint"
          }
        },
        "keyAlias" : {
          "type" : "string"
        },
        "keyStoreAlias" : {
          "type" : "string"
        }
      }
    },
    "OpenIDProviderAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authorizationEndpoint" : {
            "type" : "string"
          },
          "clientId" : {
            "type" : "string"
          },
          "clientSecret" : {
            "type" : "string"
          },
          "includeUserinfoClaims" : {
            "type" : "boolean"
          },
          "issuer" : {
            "type" : "string"
          },
          "jwksUri" : {
            "type" : "string"
          },
          "maxAge" : {
            "type" : "string"
          },
          "openIDDisplayValue" : {
            "type" : "string",
            "enum" : [ "none", "page", "popup", "touch", "wap" ]
          },
          "openIDGrantType" : {
            "type" : "string",
            "enum" : [ "authorization_code" ]
          },
          "openIDResponseType" : {
            "type" : "string",
            "enum" : [ "code", "id_token", "token id_token", "id_token token" ]
          },
          "openIDScopes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "openIDTokenEndpointAuthMode" : {
            "type" : "string",
            "enum" : [ "client_secret_basic", "client_secret_post", "none" ]
          },
          "prompt" : {
            "type" : "string",
            "enum" : [ "none", "login", "consent", "select_account" ]
          },
          "redirectionEndpointHost" : {
            "type" : "string"
          },
          "redirectionEndpointPort" : {
            "type" : "string"
          },
          "tokenEndpoint" : {
            "type" : "string"
          },
          "trustStoreAlias" : {
            "type" : "string"
          },
          "uiLocales" : {
            "type" : "string"
          },
          "userinfoEndpoint" : {
            "type" : "string"
          }
        }
      } ]
    },
    "RefreshTokenAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string"
          },
          "clientSecret" : {
            "$ref" : "#/definitions/GatewaySecret"
          },
          "token" : {
            "$ref" : "#/definitions/GatewaySecret"
          },
          "tokenType" : {
            "type" : "string",
            "example" : "SSWS/Bearer",
            "description" : "Type of token"
          }
        }
      } ]
    },
    "RemoteISConfig" : {
      "type" : "object",
      "properties" : {
        "acl" : {
          "type" : "string",
          "description" : "ACL that governs which user groups on your server can use this alias for the remote server. Select an ACL from the drop down list. By default, only members of groups governed by the Internal ACL can use this alias."
        },
        "host" : {
          "type" : "string",
          "description" : "Host name or IP address of the remote server for which you are creating an alias"
        },
        "keepAlive" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sets the default number of client keep alive connections to retain for a given target endpoint. If not specified, five keep alive connections are retained."
        },
        "password" : {
          "type" : "string",
          "description" : "Password of the corresponding user in remote IS authorization server"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5555,
          "description" : "Port number on which the remote server listens for incoming requests from your server"
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the length of time (in minutes) that your server maintains an idle connection to a remote server."
        },
        "useSSL" : {
          "type" : "boolean",
          "description" : "Whether you want your server to connect to the remote server using Secure Sockets Layer (SSL)."
        },
        "username" : {
          "type" : "string",
          "description" : "User name for a user account on the remote server. When you invoke a service using this alias, the remote server uses this user account for authentication and access control."
        }
      }
    },
    "RemoteIntrospectionConfig" : {
      "type" : "object",
      "properties" : {
        "clientId" : {
          "type" : "string",
          "description" : "ClientId of a client in the authorization server"
        },
        "clientSecret" : {
          "$ref" : "#/definitions/GatewaySecret"
        },
        "introspectionEndpoint" : {
          "type" : "string",
          "description" : "Endpoint of the authorization server to do the introspection"
        },
        "user" : {
          "type" : "string",
          "description" : "A user in the API Gateway under whom the introspection endpoint is invoked"
        }
      }
    },
    "SAMLIssuerAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "appliesTo" : {
            "type" : "string",
            "description" : "Specify the scope for which this security token is required"
          },
          "assertionId" : {
            "type" : "string"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "The endpoint URI of the STS"
          },
          "extendedParameters" : {
            "type" : "object",
            "description" : "Extensions to the <wst:RequestSecurityToken> element for requesting specific types of keys, algorithms, or key and algorithms, as specified by a given policy in the return token(s)",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "issuerAuthMode" : {
            "type" : "string",
            "description" : "Mode of communication",
            "enum" : [ "NEW", "INCOMING_HTTP_BASIC_AUTH", "INCOMING_WSS_USER", "INCOMING_X509", "DELEGATE_INCOMING", "INCOMING_OAUTH_TOKEN", "INCOMING_JWT", "TRANSPARENT", "INCOMING_KERBEROS" ]
          },
          "issuerAuthScheme" : {
            "type" : "string",
            "description" : "The authentication type used for communicating to STS",
            "enum" : [ "BASIC_AUTH", "WSS_USERNAME", "KERBEROS", "X509" ]
          },
          "issuerCommunicationMode" : {
            "type" : "string",
            "description" : "Mode of communication to the STS",
            "enum" : [ "NORMAL_CLIENT", "ACT_AS_DELEGATION" ]
          },
          "issuerPolicy" : {
            "type" : "string",
            "description" : "The webMethods Integration Server service name"
          },
          "kerberosCredentials" : {
            "$ref" : "#/definitions/KerberosCredentials"
          },
          "samlVersion" : {
            "type" : "string",
            "description" : "SAML version to be used for authentication",
            "enum" : [ "SAML1_1", "SAML_2_0" ]
          },
          "signAndEncryptConfig" : {
            "$ref" : "#/definitions/SignAndEncryptConfig"
          },
          "wsTrustVersion" : {
            "type" : "string",
            "description" : "WS-Trust version that API Gateway must use to send the RST to the SAML issuer",
            "enum" : [ "WS_TRUST_1_0", "WS_TRUST_1_3" ]
          },
          "wssCredentials" : {
            "$ref" : "#/definitions/WssCredentials"
          }
        }
      } ]
    },
    "SOAPMessageSecurityAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authMode" : {
            "type" : "string",
            "description" : "Mode of authentication",
            "enum" : [ "NEW", "INCOMING_HTTP_BASIC_AUTH", "INCOMING_WSS_USER", "INCOMING_X509", "DELEGATE_INCOMING", "INCOMING_OAUTH_TOKEN", "INCOMING_JWT", "TRANSPARENT", "INCOMING_KERBEROS" ]
          },
          "authType" : {
            "type" : "string",
            "description" : "Type of authentication that needs to be used",
            "enum" : [ "WSS_USERNAME", "SAML", "KERBEROS", "ALIAS", "REMOVE_WSS_HEADERS", "NONE" ]
          },
          "kerberosCredentials" : {
            "$ref" : "#/definitions/KerberosCredentials"
          },
          "samlIssuerConfig" : {
            "type" : "string",
            "description" : "Saml issuer configuration name"
          },
          "signAndEncryptConfig" : {
            "$ref" : "#/definitions/SignAndEncryptConfig"
          },
          "wssCredentials" : {
            "$ref" : "#/definitions/WssCredentials"
          }
        }
      } ]
    },
    "SSLConfig" : {
      "type" : "object",
      "properties" : {
        "keyAlias" : {
          "type" : "string",
          "description" : "The key alias is the private key that is used sign the request sent to the authorization server"
        },
        "keyStoreAlias" : {
          "type" : "string",
          "description" : "Specify the keystore that needs to be used by API Gateway while sending the request to the authorization server. A keystore is a repository of private key and its corresponding public certificate"
        },
        "trustStoreAlias" : {
          "type" : "string",
          "description" : "The truststore to be used by API Gateway when validating the incoming response from the authorization server. Truststore is a repository that holds all the trusted public certificates"
        }
      }
    },
    "Scope" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Description of the oauth2 scope"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the oauth2 scope"
        }
      }
    },
    "ServiceRegistryCommunication" : {
      "type" : "object",
      "properties" : {
        "httpMethod" : {
          "type" : "string",
          "description" : "HttpMethod that is used while communicating with the service registry",
          "enum" : [ "GET", "POST", "PUT", "DELETE", "HEAD", "PATCH", "OPTIONS", "TRACE", "CUSTOM" ]
        },
        "path" : {
          "type" : "string",
          "description" : "Resource path that will be appened with base endpoint while communicating with service registry"
        }
      }
    },
    "ServiceRegistryModel" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "ConnectionTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The time interval (in seconds) after which a connection attempt times out while communicating with service registry"
          },
          "customHeaders" : {
            "type" : "object",
            "description" : "Custom headers that needs be sent while communicating with the service registry",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "deRegistrationInfo" : {
            "$ref" : "#/definitions/ServiceRegistryCommunication"
          },
          "discoveryInfo" : {
            "$ref" : "#/definitions/ServiceRegistryCommunication"
          },
          "endpointURI" : {
            "type" : "string",
            "description" : "Endpoint that is used to communicate with the service registry"
          },
          "heartBeatInterval" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "APIGateway will ping the service registry on the configured interval for every API"
          },
          "keyAlias" : {
            "type" : "string",
            "description" : "The key alias is the private key that is used for signing when using SSL communication with the Service Registry."
          },
          "keystoreAlias" : {
            "type" : "string",
            "description" : "A keystore is a repository of private key. This keystore contains the private key used for the SSL communication with the Service Registry. For information on how to configure the keystore aliases, refer API Gateway Administration swagger"
          },
          "password" : {
            "type" : "string",
            "description" : "Base64 encoded password that is used in the Basic authentication when communicating with the service registry"
          },
          "readTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The time interval (in seconds) after which a socket read attempt times out while communicating with service registry"
          },
          "registrationInfo" : {
            "$ref" : "#/definitions/ServiceRegistryCommunication"
          },
          "serviceRegistryType" : {
            "type" : "string",
            "description" : "It contains the information about the type of service registry",
            "enum" : [ "SERVICE_CONSUL", "EUREKA" ]
          },
          "trustStoreAlias" : {
            "type" : "string",
            "description" : "A truststore is a repository of public keys. This truststore contains the public key of the Service Registry used for the SSL communication with the Service Registry. For information on how to configure the truststore aliases, refer API Gateway Administration swagger"
          },
          "username" : {
            "type" : "string",
            "description" : "Username that is used in the Basic authentication when communicating with the service registry"
          }
        }
      } ]
    },
    "SignAndEncryptConfig" : {
      "type" : "object",
      "properties" : {
        "certificateAlias" : {
          "type" : "string",
          "description" : "Select the certificate from the truststore that is used to validate the request that is sent to the native API."
        },
        "keyAlias" : {
          "type" : "string",
          "description" : "The key alias is the private key that is used sign the request sent to the native API"
        },
        "keyStoreAlias" : {
          "type" : "string",
          "description" : "Specify the keystore that needs to be used by API Gateway while sending the request to the native API. A keystore is a repository of private key and its corresponding public certificate"
        },
        "truststoreAlias" : {
          "type" : "string",
          "description" : "The truststore to be used by API Gateway when sending the request to the native API. Truststore is a repository that holds all the trusted public certificates"
        }
      }
    },
    "SimpleAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "value of the simple alias"
          }
        }
      } ]
    },
    "ThirdPartyOAuth2Alias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "authInfo" : {
            "$ref" : "#/definitions/AuthInfo"
          },
          "endpointDetails" : {
            "$ref" : "#/definitions/OAuth2Endpoints"
          },
          "metadata" : {
            "$ref" : "#/definitions/Metadata"
          },
          "providerName" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TokenAuth" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthInfo"
      }, {
        "type" : "object",
        "properties" : {
          "token" : {
            "$ref" : "#/definitions/GatewaySecret"
          },
          "tokenType" : {
            "type" : "string",
            "example" : "SSWS/Bearer",
            "description" : "Type of token"
          }
        }
      } ]
    },
    "TokenGeneratorConfig" : {
      "type" : "object",
      "properties" : {
        "accessTokenExpInterval" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Expiry interval in seconds for the generated access token "
        },
        "algorithm" : {
          "type" : "string",
          "description" : "Type of algorithm that needs to be used for signing the JWT",
          "enum" : [ "RS256", "RS384", "RS512" ]
        },
        "audience" : {
          "type" : "string",
          "description" : "Default audience value that needs to be added in the generated JWT"
        },
        "authCodeExpInterval" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Expiry interval in seconds for the generated authorization code in Authorization code grant type"
        },
        "enforcePKCE" : {
          "type" : "boolean",
          "description" : "Global option to apply PKCE security, for the public clients using authorization code grant type. Applicable only for local auth server"
        },
        "expiry" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Expiry interval of the JWT in minutes"
        }
      }
    },
    "TransformationAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "string",
            "description" : "content of the file"
          },
          "fileName" : {
            "type" : "string",
            "description" : "the name of the file"
          }
        }
      } ]
    },
    "WebmethodsAlias" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Alias"
      }, {
        "type" : "object",
        "properties" : {
          "complyToISSpec" : {
            "type" : "boolean",
            "description" : "A boolean value wheather the given service complies to the IS sepcification"
          },
          "runAsUser" : {
            "type" : "string",
            "description" : "User in gateway under whom you want to invoke this service"
          },
          "serviceName" : {
            "type" : "string",
            "description" : "the webMethods Integration Server service name"
          }
        }
      } ]
    },
    "WssCredentials" : {
      "type" : "object",
      "properties" : {
        "password" : {
          "type" : "string",
          "description" : "Specify a base64 encoded password for the username"
        },
        "passwordType" : {
          "type" : "string",
          "description" : "type of password",
          "enum" : [ "NONE", "TEXT", "DIGEST" ]
        },
        "userName" : {
          "type" : "string",
          "description" : "a username used to generate the WSS username token"
        }
      }
    }
  }
}